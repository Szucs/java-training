package com.neopragma.manning;

import gnu.getopt.Getopt;
import gnu.getopt.LongOpt;

import java.io.File;
import java.util.HashMap;
import java.util.Map;

public class RuntimeOptions {
	
	private static final String VERSION = "1.0.0";
	private static final String USAGE_HELP = "programname [--echo (default) | --version | --help | --save filename]";
	
	private Map<OptionName, RuntimeOption> options = null;

	/**
	 * Processes command-line options and sets instance variables accordingly.
	 * 
	 * @param args
	 */
	public RuntimeOptions(String[] args) {
		if (args == null || args.length == 0) {
			throw new InvalidRuntimeOptionException(USAGE_HELP);
		}
		options = new HashMap<OptionName, RuntimeOption>();
		
		LongOpt[] longopts = new LongOpt[4];
		longopts[0] = new LongOpt("help", LongOpt.NO_ARGUMENT, null, 'h');
		longopts[1] = new LongOpt("version", LongOpt.NO_ARGUMENT, null, 'v');
		longopts[2] = new LongOpt("echo", LongOpt.NO_ARGUMENT, null, 'e');
		longopts[3] = new LongOpt("save", LongOpt.REQUIRED_ARGUMENT, null, 's');
		Getopt g = new Getopt("thisprogramname", args, "-hve:s--;", longopts);
		g.setOpterr(false);
		int c;
		while ((c = g.getopt()) != -1) {
            switch (c) {
                case 'e' :
            	    options.put(OptionName.ECHO, new RuntimeOption(true));
                case 's' :
                	options.put(OptionName.OUTPUT_FILE, new RuntimeOption(new File(g.getOptarg())));
                	break;
                case 'v' :
            	    throw new InvalidRuntimeOptionException(VERSION);
                case 'h' : 
        			throw new InvalidRuntimeOptionException(USAGE_HELP);
                case '?' :
            	    throw new InvalidRuntimeOptionException(USAGE_HELP);
                default :
            	    options.put(OptionName.ECHO, new RuntimeOption(true));
		    }
	    }
	}	
	
	public boolean isSet(OptionName optionName) {
		return (options.get(optionName) != null);
	}

	public boolean isNotSet(OptionName optionName) {
		return !(isSet(optionName));
	}
	
	public RuntimeOption get(OptionName optionName) {
		return options.get(optionName);
	}

}
